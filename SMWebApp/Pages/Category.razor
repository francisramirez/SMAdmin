@page "/categories"

@inject UseCases.UseCaseInterfaces.IViewCategoriesUseCase _viewCategoriesUseCase
@inject UseCases.UseCaseInterfaces.IRemoveCategoryUseCase _removeCategoryUseCase
@inject NavigationManager  _navigationManager

<h3>Manage Category</h3>

@if (categories != null)
{

    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Description
                </th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>
                        @category.Name
                    </td>
                    <td>
                        @category.Description
                    </td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="(() => OnEditCategory(category.CategoryId))">Edit</button>
                        <button type="button" class="btn btn-link" @onclick="(() => OnRemoveCategory(category.CategoryId))">Remove</button>
                    </td>

                </tr>
            }

        </tbody>

    </table>
    <button class="btn btn-primary" @onclick="OnClickAddCategory">Add Category</button>
}

@code {
    private List<CoreBusiness.Entities.Category> categories;

    protected override void OnInitialized()
    {
        GetCategories();
        base.OnInitialized();
    }

    private void OnClickAddCategory()
    {
        _navigationManager.NavigateTo("/addcategory");
    }

    private void OnEditCategory(int categoryId)
    {
        _navigationManager.NavigateTo($"/editcategory/{categoryId}");
    }

    private void OnRemoveCategory(int categoryId)
    {
        _removeCategoryUseCase.RemoveCategory(categoryId);
        GetCategories();
        
    }

    private void GetCategories()
    {
        this.categories = _viewCategoriesUseCase.Execute();
    }
}
